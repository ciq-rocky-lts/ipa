diff --git a/daemons/ipa-kdb/ipa_kdb.h b/daemons/ipa-kdb/ipa_kdb.h
index 21bc3dc6ba9a..59484d8bb692 100644
--- a/daemons/ipa-kdb/ipa_kdb.h
+++ b/daemons/ipa-kdb/ipa_kdb.h
@@ -94,34 +94,6 @@
 #define IPA_KRB_AUTHZ_DATA_ATTR "ipaKrbAuthzData"
 #define IPA_USER_AUTH_TYPE "ipaUserAuthType"
 
-/* Virtual managed ticket flags like "-allow_tix", are always controlled by the
- * "nsAccountLock" attribute, such flags should never be set in the database.
- * The following expression combine all of them, and is used to filter them
- * out. */
-#define IPA_KDB_TKTFLAGS_VIRTUAL_MANAGED_ALL          (KRB5_KDB_DISALLOW_ALL_TIX)
-
-/* Virtual static ticket flags are hard-coded in the KDB driver. */
-/*   Virtual static mandatory flags are set systematically and implicitly for all
- *   principals. They are filtered out from database ticket flags updates.
- *   (However, "KRB5_KDB_REQUIRES_PRE_AUTH" can still be unset by the
- *   "KDC:Disable Default Preauth for SPNs" global setting) */
-#define IPA_KDB_TKTFLAGS_VIRTUAL_STATIC_MANDATORY     (KRB5_KDB_REQUIRES_PRE_AUTH)
-/*   Virtual static default ticket flags are implicitly set for user and non-user
- *   (SPN) principals, and not stored in the database.
- *   (Except if the "IPA_KDB_STRATTR_FINAL_TKTFLAGS" string attribute is "true"
- *   the principal) */
-/*     Virtual static default user ticket flags are set for users only. The
- *     "-allow_svr" flag is set to protect them from CVE-2024-3183. */
-#define IPA_KDB_TKTFLAGS_VIRTUAL_STATIC_DEFAULTS_USER (KRB5_KDB_DISALLOW_SVR)
-#define IPA_KDB_TKTFLAGS_VIRTUAL_STATIC_DEFAULTS_SPN  (0)
-
-/* If this string attribute is set to "true", then only the virtual managed and
- * virtual static mandatory ticket flags are applied and filtered out from
- * database read and write operations for the concerned user principal.
- * Configurable principal ticket flags are applied, but not the configurable
- * global ticket policy flags. */
-#define IPA_KDB_STRATTR_FINAL_USER_TKTFLAGS "final_user_tkt_flags"
-
 struct ipadb_mspac;
 struct dom_sid;
 
@@ -134,6 +106,7 @@ enum ipadb_user_auth {
   IPADB_USER_AUTH_PKINIT   = 1 << 4,
   IPADB_USER_AUTH_HARDENED = 1 << 5,
   IPADB_USER_AUTH_IDP      = 1 << 6,
+  IPADB_USER_AUTH_PASSKEY  = 1 << 7,
 };
 
 enum ipadb_user_auth_idx {
@@ -142,6 +115,7 @@ enum ipadb_user_auth_idx {
   IPADB_USER_AUTH_IDX_PKINIT,
   IPADB_USER_AUTH_IDX_HARDENED,
   IPADB_USER_AUTH_IDX_IDP,
+  IPADB_USER_AUTH_IDX_PASSKEY,
   IPADB_USER_AUTH_IDX_MAX,
 };
 
@@ -213,21 +187,6 @@ struct ipadb_e_data {
     struct dom_sid *sid;
 };
 
-inline static krb5_error_code
-ipadb_get_edata(krb5_db_entry *entry, struct ipadb_e_data **ied)
-{
-    struct ipadb_e_data *in_ied;
-
-    in_ied = (struct ipadb_e_data *)entry->e_data;
-    if (!in_ied || in_ied->magic != IPA_E_DATA_MAGIC)
-        return EINVAL;
-
-    if (ied)
-        *ied = in_ied;
-
-    return 0;
-}
-
 struct ipadb_context *ipadb_get_context(krb5_context kcontext);
 int ipadb_get_connection(struct ipadb_context *ipactx);
 
@@ -272,6 +231,16 @@ int ipadb_ldap_attr_has_value(LDAP *lcontext, LDAPMessage *le,
 int ipadb_ldap_deref_results(LDAP *lcontext, LDAPMessage *le,
                              LDAPDerefRes **results);
 
+krb5_error_code ipadb_get_tl_data(krb5_db_entry *entry,
+                                  krb5_int16 type,
+                                  krb5_ui_2 length,
+                                  krb5_octet *data);
+
+krb5_error_code ipadb_set_tl_data(krb5_db_entry *entry,
+                                  krb5_int16 type,
+                                  krb5_ui_2 length,
+                                  const krb5_octet *data);
+
 struct ipadb_multires;
 krb5_error_code ipadb_multires_init(LDAP *lcontext, struct ipadb_multires **r);
 void ipadb_multires_free(struct ipadb_multires *r);
@@ -424,6 +393,12 @@ krb5_error_code ipadb_check_allowed_to_delegate(krb5_context kcontext,
                                                 const krb5_db_entry *server,
                                                 krb5_const_principal proxy);
 
+krb5_error_code ipadb_allowed_to_delegate_from(krb5_context context,
+                                               krb5_const_principal client,
+                                               krb5_const_principal server,
+                                               krb5_pac server_pac,
+                                               const krb5_db_entry *proxy);
+
 /* AS AUDIT */
 
 void ipadb_audit_as_req(krb5_context kcontext,
diff --git a/daemons/ipa-kdb/ipa_kdb_principals.c b/daemons/ipa-kdb/ipa_kdb_principals.c
index a584c064da04..139f091aa9f9 100644
--- a/daemons/ipa-kdb/ipa_kdb_principals.c
+++ b/daemons/ipa-kdb/ipa_kdb_principals.c
@@ -78,10 +78,12 @@ static char *std_principal_attrs[] = {
     IPA_USER_AUTH_TYPE,
     "ipatokenRadiusConfigLink",
     "ipaIdpConfigLink",
+    "ipaPassKey",
     "krbAuthIndMaxTicketLife",
     "krbAuthIndMaxRenewableAge",
     "ipaNTSecurityIdentifier",
     "ipaUniqueID",
+    "memberPrincipal",
 
     "objectClass",
     NULL
@@ -117,6 +119,10 @@ static char *std_principal_obj_classes[] = {
 #define KRB5_KDB_SK_OPTIONAL_PAC_TKT_CHKSUM "optional_pac_tkt_chksum"
 #endif
 
+#ifndef KRB5_KDB_SK_PAC_PRIVSVR_ENCTYPE
+#define KRB5_KDB_SK_PAC_PRIVSVR_ENCTYPE "pac_privsvr_enctype"
+#endif
+
 static int ipadb_ldap_attr_to_tl_data(LDAP *lcontext, LDAPMessage *le,
                                       char *attrname,
                                       krb5_tl_data **result, int *num)
@@ -397,6 +403,25 @@ static void ipadb_validate_idp(struct ipadb_context *ipactx,
         ldap_value_free_len(vals);
 }
 
+static void ipadb_validate_passkey(struct ipadb_context *ipactx,
+                               LDAPMessage *lentry,
+                               enum ipadb_user_auth *ua)
+{
+    struct berval **vals;
+
+    if (!(*ua & IPADB_USER_AUTH_PASSKEY))
+        return;
+
+    /* Ensure that the user has a link to an IdP config. */
+    vals = ldap_get_values_len(ipactx->lcontext, lentry,
+                               "ipaPassKey");
+    if (vals == NULL || vals[0] == NULL)
+        *ua &= ~IPADB_USER_AUTH_PASSKEY;
+
+    if (vals != NULL)
+        ldap_value_free_len(vals);
+}
+
 static enum ipadb_user_auth ipadb_get_user_auth(struct ipadb_context *ipactx,
                                                 LDAPMessage *lentry)
 {
@@ -430,6 +455,7 @@ static enum ipadb_user_auth ipadb_get_user_auth(struct ipadb_context *ipactx,
     ipadb_validate_otp(ipactx, lentry, &ua);
     ipadb_validate_radius(ipactx, lentry, &ua);
     ipadb_validate_idp(ipactx, lentry, &ua);
+    ipadb_validate_passkey(ipactx, lentry, &ua);
 
     return ua;
 }
@@ -614,6 +640,8 @@ static void ipadb_parse_authind_policies(krb5_context kcontext,
          IPADB_USER_AUTH_HARDENED, IPADB_USER_AUTH_IDX_HARDENED},
         {"krbAuthIndMaxTicketLife;idp",
          IPADB_USER_AUTH_IDP, IPADB_USER_AUTH_IDX_IDP},
+        {"krbAuthIndMaxTicketLife;passkey",
+         IPADB_USER_AUTH_PASSKEY, IPADB_USER_AUTH_IDX_PASSKEY},
 	    {NULL, IPADB_USER_AUTH_NONE, IPADB_USER_AUTH_IDX_MAX},
     }, age_authind_map[] = {
         {"krbAuthIndMaxRenewableAge;otp",
@@ -626,6 +654,8 @@ static void ipadb_parse_authind_policies(krb5_context kcontext,
          IPADB_USER_AUTH_HARDENED, IPADB_USER_AUTH_IDX_HARDENED},
         {"krbAuthIndMaxRenewableAge;idp",
          IPADB_USER_AUTH_IDP, IPADB_USER_AUTH_IDX_IDP},
+        {"krbAuthIndMaxRenewableAge;passkey",
+         IPADB_USER_AUTH_PASSKEY, IPADB_USER_AUTH_IDX_PASSKEY},
         {NULL, IPADB_USER_AUTH_NONE, IPADB_USER_AUTH_IDX_MAX},
     };
 
@@ -669,6 +699,7 @@ static krb5_error_code ipadb_parse_ldap_entry(krb5_context kcontext,
     const krb5_octet rad_string[] = "otp\0[{\"indicators\": [\"radius\"]}]";
     const krb5_octet otp_string[] = "otp\0[{\"indicators\": [\"otp\"]}]";
     const krb5_octet idp_string[] = "idp\0[{\"type\":\"oauth2\",\"indicators\": [\"idp\"]}]";
+    const krb5_octet passkey_string[] = "passkey\0[{\"indicators\": [\"passkey\"]}]";
     struct ipadb_context *ipactx;
     enum ipadb_user_auth ua;
     LDAP *lcontext;
@@ -683,6 +714,7 @@ static krb5_error_code ipadb_parse_ldap_entry(krb5_context kcontext,
     char *uidstring;
     char **authz_data_list;
     char *princ_sid;
+    char **acl_list;
     krb5_timestamp restime;
     bool resbool;
     int result;
@@ -733,12 +765,9 @@ static krb5_error_code ipadb_parse_ldap_entry(krb5_context kcontext,
                                  "krbTicketFlags", &result);
     if (ret == 0) {
         entry->attributes = result;
-    }
-    /* Since principal, global policy, and virtual ticket flags are combined,
-     * they must always be resolved, except if we are in IPA setup mode (because
-     * ticket policies and virtual ticket flags are irrelevant in this case). */
-    if (!ipactx->override_restrictions)
+    } else {
         *polmask |= TKTFLAGS_BIT;
+    }
 
     ret = ipadb_ldap_attr_to_int(lcontext, lentry,
                                  "krbMaxTicketLife", &result);
@@ -942,12 +971,7 @@ static krb5_error_code ipadb_parse_ldap_entry(krb5_context kcontext,
         goto done;
     }
     if (ret == 0) {
-        if (1 == krb5_princ_size(kcontext, entry->princ)) {
-            /* A principal must be a POSIX account AND have only one element to
-             * be considered a user (this is to filter out CIFS principals). */
-            ied->ipa_user = true;
-        }
-
+        ied->ipa_user = true;
         ret = ipadb_ldap_attr_to_str(lcontext, lentry,
                                      "uid", &uidstring);
         if (ret != 0 && ret != ENOENT) {
@@ -1060,6 +1084,11 @@ static krb5_error_code ipadb_parse_ldap_entry(krb5_context kcontext,
                                  sizeof(idp_string), idp_string);
         if (kerr)
             goto done;
+    } else if (ua & IPADB_USER_AUTH_PASSKEY) {
+        kerr = ipadb_set_tl_data(entry, KRB5_TL_STRING_ATTRS,
+                                 sizeof(passkey_string), passkey_string);
+        if (kerr)
+            goto done;
     }
 
     if (ua & ~IPADB_USER_AUTH_NONE) {
@@ -1087,6 +1116,30 @@ static krb5_error_code ipadb_parse_ldap_entry(krb5_context kcontext,
         ied->has_sid = true;
     }
 
+    /* check if it has the serviceDelegation objectclass */
+    ret = ipadb_ldap_attr_has_value(lcontext, lentry,
+                                    "objectClass", "resourceDelegation");
+    if (ret != 0 && ret != ENOENT) {
+        kerr = ret;
+        goto done;
+    }
+    if (ret == 0) {
+        ret = ipadb_ldap_attr_to_strlist(lcontext, lentry,
+                                        "memberPrincipal", &acl_list);
+        if (ret != 0 && ret != ENOENT) {
+            kerr = KRB5_KDB_INTERNAL_ERROR;
+            goto done;
+        }
+        if (ret == 0) {
+            kerr = ipadb_set_tl_data(entry, KRB5_TL_CONSTRAINED_DELEGATION_ACL,
+                                     sizeof(acl_list),
+                                     (const krb5_octet *) &acl_list);
+            if (kerr) {
+                goto done;
+            }
+        }
+    }
+
     kerr = 0;
 
 done:
@@ -1286,150 +1339,23 @@ done:
     return ret;
 }
 
-static krb5_error_code
-are_final_tktflags(struct ipadb_context *ipactx, krb5_db_entry *entry,
-                   bool *final_tktflags)
-{
-    krb5_error_code kerr;
-    struct ipadb_e_data *ied;
-    char *str = NULL;
-    bool in_final_tktflags = false;
-
-    kerr = ipadb_get_edata(entry, &ied);
-    if (kerr)
-        goto end;
-
-    if (!ied->ipa_user) {
-        kerr = 0;
-        goto end;
-    }
-
-    kerr = krb5_dbe_get_string(ipactx->kcontext, entry,
-                               IPA_KDB_STRATTR_FINAL_USER_TKTFLAGS, &str);
-    if (kerr)
-        goto end;
-
-    in_final_tktflags = str && ipa_krb5_parse_bool(str);
-
-end:
-    if (final_tktflags)
-        *final_tktflags = in_final_tktflags;
-
-    krb5_dbe_free_string(ipactx->kcontext, str);
-    return kerr;
-}
-
-static krb5_error_code
-add_virtual_static_tktflags(struct ipadb_context *ipactx, krb5_db_entry *entry,
-                            krb5_flags *tktflags)
+static krb5_flags maybe_require_preauth(struct ipadb_context *ipactx,
+                                        krb5_db_entry *entry)
 {
-    krb5_error_code kerr;
-    krb5_flags vsflg;
-    bool final_tktflags;
-    const struct ipadb_global_config *gcfg;
+    const struct ipadb_global_config *config;
     struct ipadb_e_data *ied;
 
-    vsflg = IPA_KDB_TKTFLAGS_VIRTUAL_STATIC_MANDATORY;
-
-    kerr = ipadb_get_edata(entry, &ied);
-    if (kerr)
-        goto end;
-
-    kerr = are_final_tktflags(ipactx, entry, &final_tktflags);
-    if (kerr)
-        goto end;
-
-    /* In practice, principal ticket flags cannot be final for SPNs. */
-    if (!final_tktflags)
-        vsflg |= ied->ipa_user ? IPA_KDB_TKTFLAGS_VIRTUAL_STATIC_DEFAULTS_USER
-                               : IPA_KDB_TKTFLAGS_VIRTUAL_STATIC_DEFAULTS_SPN;
-
-    if (!ied->ipa_user) {
-        gcfg = ipadb_get_global_config(ipactx);
-        if (gcfg && gcfg->disable_preauth_for_spns)
-            vsflg &= ~KRB5_KDB_REQUIRES_PRE_AUTH;
-    }
-
-    if (tktflags)
-        *tktflags |= vsflg;
-
-end:
-    return kerr;
-}
-
-static krb5_error_code
-get_virtual_static_tktflags_mask(struct ipadb_context *ipactx,
-                                 krb5_db_entry *entry, krb5_flags *mask)
-{
-    krb5_error_code kerr;
-    krb5_flags flags = IPA_KDB_TKTFLAGS_VIRTUAL_MANAGED_ALL;
-
-    kerr = add_virtual_static_tktflags(ipactx, entry, &flags);
-    if (kerr)
-        goto end;
-
-    if (mask)
-        *mask = ~flags;
-
-    kerr = 0;
-
-end:
-    return kerr;
-}
-
-/* Add ticket flags from the global ticket policy if it exists, otherwise
- * succeed. If the global ticket policy is set, the "exists" parameter is set to
- * true. */
-static krb5_error_code
-add_global_ticket_policy_flags(struct ipadb_context *ipactx,
-                               bool *gtpol_exists, krb5_flags *tktflags)
-{
-    krb5_error_code kerr;
-    char *policy_dn;
-    char *tktflags_attr[] = { "krbticketflags", NULL };
-    LDAPMessage *res = NULL, *first;
-    int ec, ldap_tktflags;
-    bool in_gtpol_exists = false;
-
-    ec = asprintf(&policy_dn, "cn=%s,cn=kerberos,%s", ipactx->realm,
-                  ipactx->base);
-    if (-1 == ec) {
-        kerr = ENOMEM;
-        goto end;
-    }
-
-    kerr = ipadb_simple_search(ipactx, policy_dn, LDAP_SCOPE_BASE,
-                               "(objectclass=krbticketpolicyaux)",
-                               tktflags_attr, &res);
-    if (kerr) {
-        if (KRB5_KDB_NOENTRY == kerr)
-            kerr = 0;
-        goto end;
-    }
-
-    first = ldap_first_entry(ipactx->lcontext, res);
-    if (!first) {
-        kerr = 0;
-        goto end;
-    }
-
-    in_gtpol_exists = true;
-
-    ec = ipadb_ldap_attr_to_int(ipactx->lcontext, first, "krbticketflags",
-                                &ldap_tktflags);
-    if (0 == ec && tktflags) {
-        *tktflags |= (krb5_flags)ldap_tktflags;
+    config = ipadb_get_global_config(ipactx);
+    if (config && config->disable_preauth_for_spns) {
+        ied = (struct ipadb_e_data *)entry->e_data;
+        if (ied && ied->ipa_user != true) {
+            /* not a user, assume SPN */
+            return 0;
+        }
     }
 
-    kerr = 0;
-
-end:
-    if (gtpol_exists)
-        *gtpol_exists = in_gtpol_exists;
-
-    ldap_msgfree(res);
-    free(policy_dn);
-    return kerr;
+    /* By default require preauth for all principals */
+    return KRB5_KDB_REQUIRES_PRE_AUTH;
 }
 
 static krb5_error_code ipadb_fetch_tktpolicy(krb5_context kcontext,
@@ -1442,7 +1368,6 @@ static krb5_error_code ipadb_fetch_tktpolicy(krb5_context kcontext,
     char *policy_dn = NULL;
     LDAPMessage *res = NULL;
     LDAPMessage *first;
-    bool final_tktflags, has_local_tktpolicy = true;
     int result;
     int ret;
 
@@ -1451,18 +1376,12 @@ static krb5_error_code ipadb_fetch_tktpolicy(krb5_context kcontext,
         return KRB5_KDB_DBNOTINITED;
     }
 
-    kerr = are_final_tktflags(ipactx, entry, &final_tktflags);
-    if (kerr)
-        goto done;
-
     ret = ipadb_ldap_attr_to_str(ipactx->lcontext, lentry,
                                  "krbticketpolicyreference", &policy_dn);
     switch (ret) {
     case 0:
         break;
     case ENOENT:
-        /* If no principal ticket policy, fallback to the global one. */
-        has_local_tktpolicy = false;
         ret = asprintf(&policy_dn, "cn=%s,cn=kerberos,%s",
                                    ipactx->realm, ipactx->base);
         if (ret == -1) {
@@ -1506,13 +1425,12 @@ static krb5_error_code ipadb_fetch_tktpolicy(krb5_context kcontext,
                 }
             }
             if (polmask & TKTFLAGS_BIT) {
-                /* If global ticket policy is being applied, set flags only if
-                 * user principal ticket flags are not final. */
-                if (has_local_tktpolicy || !final_tktflags) {
-                    ret = ipadb_ldap_attr_to_int(ipactx->lcontext, first,
-                                                 "krbticketflags", &result);
-                    if (ret == 0)
-                        entry->attributes |= result;
+                ret = ipadb_ldap_attr_to_int(ipactx->lcontext, first,
+                                             "krbticketflags", &result);
+                if (ret == 0) {
+                    entry->attributes |= result;
+                } else {
+                    entry->attributes |= maybe_require_preauth(ipactx, entry);
                 }
             }
 
@@ -1536,25 +1454,11 @@ static krb5_error_code ipadb_fetch_tktpolicy(krb5_context kcontext,
         if (polmask & MAXRENEWABLEAGE_BIT) {
             entry->max_renewable_life = 604800;
         }
-
-        kerr = 0;
-    }
-
-    if (polmask & TKTFLAGS_BIT) {
-        /* If the principal ticket flags were applied, then flags from the
-         * global ticket policy has to be applied atop of them if user principal
-         * ticket flags are not final. */
-        if (has_local_tktpolicy && !final_tktflags) {
-            kerr = add_global_ticket_policy_flags(ipactx, NULL,
-                                                  &entry->attributes);
-            if (kerr)
-            goto done;
+        if (polmask & TKTFLAGS_BIT) {
+            entry->attributes |= maybe_require_preauth(ipactx, entry);
         }
 
-        /* Virtual static ticket flags are set regardless of database content */
-        kerr = add_virtual_static_tktflags(ipactx, entry, &entry->attributes);
-        if (kerr)
-            goto done;
+        kerr = 0;
     }
 
 done:
@@ -1666,6 +1570,14 @@ done:
     return kerr;
 }
 
+/* For krb5 1.19, there is no KRB5_KDB_FLAG_REFERRAL_OK, emulate it
+ * See krb5 commit a441fbe329ebbd7775eb5d4ccc4a05eef370f08b */
+#ifndef KRB5_KDB_FLAG_REFERRAL_OK
+#ifdef KRB5_KDB_FLAG_CANONICALIZE
+#define KRB5_KDB_FLAG_REFERRAL_OK KRB5_KDB_FLAG_CANONICALIZE
+#endif
+#endif
+
 static krb5_error_code dbget_alias(krb5_context kcontext,
                                    struct ipadb_context *ipactx,
                                    krb5_const_principal search_for,
@@ -1679,18 +1591,39 @@ static krb5_error_code dbget_alias(krb5_context kcontext,
     krb5_db_entry *kentry = NULL;
     krb5_data *realm;
     krb5_boolean check = FALSE;
+    /* KRB5_NT_PRINCIPAL must be the last element */
+    krb5_int32 supported_types[] = {
+        [0] = KRB5_NT_ENTERPRISE_PRINCIPAL,
+        [1] = KRB5_NT_PRINCIPAL,
+        -1,
+    };
+    size_t i = 0;
 
-    /* TODO: also support hostbased aliases */
+    /* For TGS-REQ server principal lookup, KDC asks with KRB5_KDB_FLAG_REFERRAL_OK
+     * and client usually asks for an KRB5_NT_PRINCIPAL type principal. */
+    if ((flags & KRB5_KDB_FLAG_REFERRAL_OK) == 0) {
+       /* this is *not* TGS-REQ server principal search, remove
+	* KRB5_NT_PRINCIPAL from the supported principal types for this lookup */
+       supported_types[(sizeof(supported_types) / sizeof(supported_types[0])) - 2] = -1;
+    }
 
     /* Enterprise principal name type is for potential aliases or principals
-     * from trusted realms. The logic below only applies to this type */
-    if (krb5_princ_type(kcontext, search_for) != KRB5_NT_ENTERPRISE_PRINCIPAL) {
+     * from trusted realms. Except for the TGS-REQ server lookup, we only
+     * expect enterprise principals here */
+    for (i = 0; supported_types[i] != -1; i++) {
+        if (krb5_princ_type(kcontext, search_for) == supported_types[i]) {
+            break;
+        }
+    }
+
+    if (supported_types[i] == -1) {
         return KRB5_KDB_NOENTRY;
     }
 
     /* enterprise principal can only have single component in the name
      * according to RFC6806 section 5. */
-    if (krb5_princ_size(kcontext, search_for) != 1) {
+    if ((krb5_princ_type(kcontext, search_for) == KRB5_NT_ENTERPRISE_PRINCIPAL) &&
+        (krb5_princ_size(kcontext, search_for) != 1)) {
         return KRB5_KDB_NOENTRY;
     }
 
@@ -1714,6 +1647,12 @@ static krb5_error_code dbget_alias(krb5_context kcontext,
     if (krb5_realm_compare(kcontext, ipactx->local_tgs, norm_princ)) {
         /* In realm alias, try to retrieve it and let the caller handle it. */
         kerr = dbget_princ(kcontext, ipactx, norm_princ, flags, entry);
+    }
+
+    /* if we haven't found the principal in our realm, it might still
+     * be a referral to a known realm. Otherwise, bail out with the result */
+    if ((kerr != KRB5_KDB_NOENTRY) &&
+        (flags & KRB5_KDB_FLAG_REFERRAL_OK) == 0) {
         goto done;
     }
 
@@ -1757,7 +1696,30 @@ static krb5_error_code dbget_alias(krb5_context kcontext,
                                                  &trusted_realm);
     }
 
+    if (kerr == KRB5_KDB_NOENTRY) {
+        krb5_data *hstname = NULL;
+        int ncomponents = krb5_princ_size(kcontext, norm_princ);
+
+        /* We did not find any alias so far for non-server principal lookups */
+        if ((ncomponents < 2) && ((flags & KRB5_KDB_FLAG_REFERRAL_OK) == 0)) {
+            goto done;
+        }
+
+	/* At this point it is a server principal lookup that might be
+         * referencing a host name in a trusted domain. It might also
+         * have multiple service components so take the last one for the
+         * hostname or the domain name. See MS-ADTS 2.2.21 and MS-DRSR 2.2.4.2.
+         */
+        hstname = krb5_princ_component(kcontext, norm_princ, ncomponents - 1);
+
+        kerr = ipadb_is_princ_from_trusted_realm(kcontext,
+                                                 hstname->data,
+                                                 hstname->length,
+                                                 &trusted_realm);
+    }
+
     if (kerr != 0) {
+        kerr = KRB5_KDB_NOENTRY;
         goto done;
     }
 
@@ -1869,6 +1831,19 @@ krb5_error_code ipadb_get_principal(krb5_context kcontext,
         if (kerr)
             return kerr;
 
+        /* for trusted AD forests we currently must use SHA-1-based
+         * encryption types. For details, see
+         * https://github.com/krb5/krb5/commit/5af907156f8f502bbe268f0c62274f88a61261e4
+         */
+        if (!is_local_tgs_princ) {
+            kerr = krb5_dbe_set_string(kcontext, *entry,
+                                       KRB5_KDB_SK_PAC_PRIVSVR_ENCTYPE,
+                                       "aes256-sha1");
+            if (kerr)
+                return kerr;
+
+        }
+
         /* We should have been initialized at this point already */
         if (ipactx->optional_pac_tkt_chksum == IPADB_TRISTATE_UNDEFINED) {
                 return KRB5_KDB_SERVER_INTERNAL_ERR;
@@ -1917,12 +1892,20 @@ void ipadb_free_principal_e_data(krb5_context kcontext, krb5_octet *e_data)
 void ipadb_free_principal(krb5_context kcontext, krb5_db_entry *entry)
 {
     krb5_tl_data *prev, *next;
+    size_t i;
 
     if (entry) {
         krb5_free_principal(kcontext, entry->princ);
         prev = entry->tl_data;
         while(prev) {
             next = prev->tl_data_next;
+            /* Handle RBCD ACL type */
+            if (prev->tl_data_type == KRB5_TL_CONSTRAINED_DELEGATION_ACL) {
+                char **acl_list = (char **) prev->tl_data_contents;
+                for (i = 0; (acl_list != NULL) && (acl_list[i] != NULL); i++) {
+                    free(acl_list[i]);
+                }
+            }
             free(prev->tl_data_contents);
             free(prev);
             prev = next;
@@ -1937,10 +1920,10 @@ void ipadb_free_principal(krb5_context kcontext, krb5_db_entry *entry)
     }
 }
 
-static krb5_error_code ipadb_get_tl_data(krb5_db_entry *entry,
-                                         krb5_int16 type,
-                                         krb5_ui_2 length,
-                                         krb5_octet *data)
+krb5_error_code ipadb_get_tl_data(krb5_db_entry *entry,
+                                  krb5_int16 type,
+                                  krb5_ui_2 length,
+                                  krb5_octet *data)
 {
     krb5_tl_data *td;
 
@@ -2061,36 +2044,6 @@ static void ipadb_mods_free_tip(struct ipadb_mods *imods)
     imods->tip--;
 }
 
-/* Use LDAP REPLACE operation to remove an attribute.
- * Contrary to the DELETE operation, it will not fail if the attribute does not
- * exist. */
-static krb5_error_code
-ipadb_ldap_replace_remove(struct ipadb_mods *imods, char *attribute)
-{
-    krb5_error_code kerr;
-    LDAPMod *m = NULL;
-
-    kerr = ipadb_mods_new(imods, &m);
-    if (kerr)
-        return kerr;
-
-    m->mod_op = LDAP_MOD_REPLACE;
-    m->mod_type = strdup(attribute);
-    if (!m->mod_type) {
-        kerr = ENOMEM;
-        goto end;
-    }
-
-    m->mod_values = NULL;
-
-    kerr = 0;
-
-end:
-    if (kerr)
-        ipadb_mods_free_tip(imods);
-    return kerr;
-}
-
 static krb5_error_code ipadb_get_ldap_mod_str(struct ipadb_mods *imods,
                                               char *attribute, char *value,
                                               int mod_op)
@@ -2222,6 +2175,7 @@ done:
 static bool should_filter_out_attr(krb5_tl_data *data)
 {
     switch (data->tl_data_type) {
+        case KRB5_TL_CONSTRAINED_DELEGATION_ACL:
         case KRB5_TL_DB_ARGS:
         case KRB5_TL_KADM_DATA:
         case KRB5_TL_LAST_ADMIN_UNLOCK:
@@ -2506,93 +2460,6 @@ static krb5_error_code ipadb_get_ldap_mod_auth_ind(krb5_context kcontext,
     return ret;
 }
 
-static krb5_error_code
-update_tktflags(krb5_context kcontext, struct ipadb_mods *imods,
-                krb5_db_entry *entry, int mod_op)
-{
-    krb5_error_code kerr;
-    struct ipadb_context *ipactx;
-    struct ipadb_e_data *ied;
-    bool final_tktflags;
-    krb5_flags tktflags_mask;
-    int tktflags;
-
-    ipactx = ipadb_get_context(kcontext);
-    if (!ipactx) {
-        kerr = KRB5_KDB_DBNOTINITED;
-        goto end;
-    }
-
-    if (ipactx->override_restrictions) {
-        /* In IPA setup mode, IPA edata might not be available. In this mode,
-         * ticket flags are written as they are provided. */
-        tktflags = (int)entry->attributes;
-    } else {
-        kerr = ipadb_get_edata(entry, &ied);
-        if (kerr)
-            goto end;
-
-        kerr = get_virtual_static_tktflags_mask(ipactx, entry, &tktflags_mask);
-        if (kerr)
-            goto end;
-
-        kerr = are_final_tktflags(ipactx, entry, &final_tktflags);
-        if (kerr)
-            goto end;
-
-        /* Flags from the global ticket policy are filtered out only if the user
-         * principal flags are not final. */
-        if (!final_tktflags) {
-            krb5_flags gbl_tktflags = 0;
-
-            kerr = add_global_ticket_policy_flags(ipactx, NULL, &gbl_tktflags);
-            if (kerr)
-                goto end;
-
-            tktflags_mask &= ~gbl_tktflags;
-        }
-
-        tktflags = (int)(entry->attributes & tktflags_mask);
-
-        if (LDAP_MOD_REPLACE == mod_op && ied && !ied->has_tktpolaux) {
-            if (0 == tktflags) {
-                /* No point initializing principal ticket policy if there are no
-                 * flags left after filtering out virtual and global ticket
-                 * policy ones. */
-                kerr = 0;
-                goto end;
-            }
-
-            /* if the object does not have the krbTicketPolicyAux class
-             * we need to add it or this will fail, only for modifications.
-             * We always add this objectclass by default when doing an add
-             * from scratch. */
-            kerr = ipadb_get_ldap_mod_str(imods, "objectclass",
-                                          "krbTicketPolicyAux", LDAP_MOD_ADD);
-            if (kerr)
-                goto end;
-        }
-    }
-
-    if (tktflags != 0) {
-        kerr = ipadb_get_ldap_mod_int(imods, "krbTicketFlags", tktflags,
-                                      mod_op);
-        if (kerr)
-            goto end;
-    } else if (LDAP_MOD_REPLACE == mod_op) {
-        /* If the principal is not being created, and there are no custom ticket
-         * flags to be set, remove the "krbTicketFlags" attribute. */
-        kerr = ipadb_ldap_replace_remove(imods, "krbTicketFlags");
-        if (kerr)
-            goto end;
-    }
-
-    kerr = 0;
-
-end:
-    return kerr;
-}
-
 static krb5_error_code ipadb_entry_to_mods(krb5_context kcontext,
                                            struct ipadb_mods *imods,
                                            krb5_db_entry *entry,
@@ -2668,9 +2535,36 @@ static krb5_error_code ipadb_entry_to_mods(krb5_context kcontext,
 
     /* KADM5_ATTRIBUTES */
     if (entry->mask & KMASK_ATTRIBUTES) {
-        kerr = update_tktflags(kcontext, imods, entry, mod_op);
-        if (kerr)
+        /* if the object does not have the krbTicketPolicyAux class
+         * we need to add it or this will fail, only for modifications.
+         * We always add this objectclass by default when doing an add
+         * from scratch. */
+        if ((mod_op == LDAP_MOD_REPLACE) && entry->e_data) {
+            struct ipadb_e_data *ied;
+
+            ied = (struct ipadb_e_data *)entry->e_data;
+            if (ied->magic != IPA_E_DATA_MAGIC) {
+                kerr = EINVAL;
+                goto done;
+            }
+
+            if (!ied->has_tktpolaux) {
+                kerr = ipadb_get_ldap_mod_str(imods, "objectclass",
+                                              "krbTicketPolicyAux",
+                                              LDAP_MOD_ADD);
+                if (kerr) {
+                    goto done;
+                }
+            }
+        }
+
+        kerr = ipadb_get_ldap_mod_int(imods,
+                                      "krbTicketFlags",
+                                      (int)entry->attributes,
+                                      mod_op);
+        if (kerr) {
             goto done;
+        }
     }
 
     /* KADM5_MAX_LIFE */
@@ -3079,19 +2973,25 @@ remove_virtual_str_attrs(krb5_context kcontext, krb5_db_entry *entry)
 {
     char *str_attr_val;
     krb5_error_code kerr;
+    const char *str_attrs[] = {
+        KRB5_KDB_SK_OPTIONAL_PAC_TKT_CHKSUM,
+        KRB5_KDB_SK_PAC_PRIVSVR_ENCTYPE,
+        NULL};
+
+    for(int i = 0; str_attrs[i] != NULL; i++) {
+        kerr = krb5_dbe_get_string(kcontext, entry,
+                                   str_attrs[i],
+                                   &str_attr_val);
+        if (kerr)
+            return kerr;
 
-    kerr = krb5_dbe_get_string(kcontext, entry,
-                               KRB5_KDB_SK_OPTIONAL_PAC_TKT_CHKSUM,
-                               &str_attr_val);
-    if (kerr)
-        return kerr;
-
-    if (str_attr_val)
-        kerr = krb5_dbe_set_string(kcontext, entry,
-                                   KRB5_KDB_SK_OPTIONAL_PAC_TKT_CHKSUM,
-                                   NULL);
+        if (str_attr_val)
+            kerr = krb5_dbe_set_string(kcontext, entry,
+                                       str_attrs[i],
+                                       NULL);
 
-    krb5_dbe_free_string(kcontext, str_attr_val);
+        krb5_dbe_free_string(kcontext, str_attr_val);
+    }
     return kerr;
 }
 
